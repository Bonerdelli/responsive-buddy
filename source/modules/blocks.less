@import '../vars';

/**
 * Responsive helpers for blocks
 * Inculdes paddings and margins, hiding, text aligning, etc.
 * @author Andrey Nekrasov <bonerdelli@gmail.com>
 * @package spent-web-travel
 * @version 1.1.0
 */

@block-indents:
  no     @indent-no,
  tiny   @indent-tiny,
  small  @indent-small,
  medium @indent-medium,
  large  @indent-large,
  big    @indent-big,
  huge   @indent-huge
;

// Classes for paddings and margins mixin
.generate-indent-classes(@indent, @value, @size) {

  // Block margins
  .@{size}margin-@{indent} {
    margin: @value !important;
  }
  .@{size}margin-@{indent}-t {
    margin-top: @value !important;
  }
  .@{size}margin-@{indent}-r {
    margin-right: @value !important;
  }
  .@{size}margin-@{indent}-b {
    margin-bottom: @value !important;
  }
  .@{size}margin-@{indent}-l {
    margin-left: @value !important;
  }
  .@{size}margin-@{indent}-v,
  .@{size}margin-@{indent}-tb {
    margin-top: @value !important;
    margin-bottom: @value !important;
  }
  .@{size}margin-@{indent}-h,
  .@{size}margin-@{indent}-rl {
    margin-right: @value !important;
    margin-left: @value !important;
  }

  // Block paddings
  .@{size}padding-@{indent} {
    padding: @value !important;
  }
  .@{size}padding-@{indent}-t {
    padding-top: @value !important;
  }
  .@{size}padding-@{indent}-r {
    padding-right: @value !important;
  }
  .@{size}padding-@{indent}-b {
    padding-bottom: @value !important;
  }
  .@{size}padding-@{indent}-l {
    padding-left: @value !important;
  }
  .@{size}padding-@{indent}-v,
  .@{size}padding-@{indent}-tb {
    padding-top: @value !important;
    padding-bottom: @value !important;
  }
  .@{size}padding-@{indent}-h,
  .@{size}padding-@{indent}-rl {
    padding-right: @value !important;
    padding-left: @value !important;
  }

}

// Responsive visibility mixin
.generate-visibility-classes(@size) {
  .hide-@{size} {
    display: none !important;
  }
}

// Responsive texts aligning mixin
.generate-text-aligning-classes(@size) {

  .text-left@{size} {
    text-align: left !important;
  }
  .text-right@{size} {
    text-align: right !important;
  }
  .text-center@{size} {
    text-align: center !important;
  }
  .text-nowrap@{size} {
    white-space: nowrap !important;
  }

}

/**
 * Classes generation for indents and hiding
 */

.generate-indents(@size) {
  // Iterate defined indents and generate classes for them
  .blocks-iterate-indents(length(@block-indents));
  .blocks-iterate-indents(@n, @i: 1) when (@i <= @n) {
    @pair: extract(@block-indents, @i);
    @indent: extract(@pair, 1);
    @value: extract(@pair, 2);
    .generate-indent-classes(@indent, @value, @size);
    .blocks-iterate-indents(@n, (@i + 1));
  }
}

// Generate classes without size definition
.generate-indents(e(""));
// NOTE: duplicate classes from texts.less
.generate-text-aligning-classes(e(""));

// Generate classes for a first defined resolution
.generate-indents(e("@{grid-start-size}-"));
.generate-text-aligning-classes(e("-@{grid-start-size}"));

// Generate indent classes for defined resolutions
// With media breakpoints based on min-width (mobile first)
.blocks-iterate-min-sizes(length(@grid-min-sizes));
.blocks-iterate-min-sizes(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-min-sizes, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(@size);
    .generate-text-aligning-classes(e("-@{size}"));
    .generate-indents(e("@{size}-"));
  }
  .blocks-iterate-min-sizes(@n, (@i + 1));
}

// Generate indent classes for defined resolutions
// With media breakpoints based on max-width (non-mobile first)
.blocks-iterate-max-sizes(length(@grid-max-sizes));
.blocks-iterate-max-sizes(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-max-sizes, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(e("@{size}-max"));
    .generate-text-aligning-classes(e("-@{size}-max"));
    .generate-indents(e("@{size}-max-"));
  }
  .blocks-iterate-max-sizes(@n, (@i + 1));
}

// Generate classes for defined intervals
.blocks-iterate-intervals(length(@grid-intervals));
.blocks-iterate-intervals(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-intervals, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(e("@{size}-only"));
    .generate-text-aligning-classes(e("-@{size}-only"));
    .generate-indents(e("@{size}-only-"));
  }
  .blocks-iterate-intervals(@n, (@i + 1));
}
